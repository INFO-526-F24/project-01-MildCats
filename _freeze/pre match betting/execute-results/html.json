{
  "hash": "dd790bc9865ddbd3a85a6fb19196abba",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n```{.r .cell-code}\n# --- Setup: Adding Binary Columns to the Dataset ---\nlibrary(shiny)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'shiny' was built under R version 4.4.2\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'ggplot2' was built under R version 4.4.2\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'dplyr' was built under R version 4.4.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(plotly)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'plotly' was built under R version 4.4.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'plotly'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at C:/Users/ual-laptop/Desktop/Data Visualization/project-01-MildCats(PreMatch Betting)\n```\n\n\n:::\n\n```{.r .cell-code}\n# Error handling for file path\ntryCatch({\n  file_path <- here(\"data\", \"soccer_main.csv\")  \n  data <- read.csv(file_path)\n}, error = function(e) {\n  stop(\"Error reading the file. Please check the file path: \", e$message)\n})\n\n# Check for required columns\nrequired_columns <- c(\"hometeam\", \"awayteam\", \"b365ahh\", \"b365aha\", \"location\")\nmissing_columns <- setdiff(required_columns, colnames(data))\nif (length(missing_columns) > 0) {\n  stop(\"Missing columns: \", paste(missing_columns, collapse = \", \"))\n}\n\n# Add binary columns with safer conversion\ndata <- data %>%\n  mutate(\n    binary_home_win = as.integer(b365ahh < b365aha),\n    binary_away_win = as.integer(b365aha < b365ahh),\n    binary_draw = as.integer(b365ahh == b365aha),\n    actual_outcome = case_when(\n      binary_home_win == 1 ~ \"Home Win\",\n      binary_away_win == 1 ~ \"Away Win\",\n      binary_draw == 1 ~ \"Draw\",\n      TRUE ~ NA_character_\n    )\n  )\n\n# Safely write the updated data\ntryCatch({\n  write.csv(data, file_path, row.names = FALSE)\n}, warning = function(w) {\n  message(\"Warning while writing file: \", w$message)\n}, error = function(e) {\n  stop(\"Error writing file: \", e$message)\n})\n\n# --- Shiny Application ---\nui <- fluidPage(\n  titlePanel(\"Accuracy of Pre-Match Betting Predictions\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\n        \"location\",\n        \"Select Location:\",\n        choices = sort(unique(data$location)),\n        selected = NULL\n      ),\n      selectInput(\n        \"hometeam\",\n        \"Select Home Team:\",\n        choices = sort(unique(data$hometeam)),\n        selected = NULL\n      ),\n      selectInput(\n        \"awayteam\",\n        \"Select Away Team:\",\n        choices = sort(unique(data$awayteam)),\n        selected = NULL\n      )\n    ),\n    mainPanel(\n      plotlyOutput(\"accuracy_chart\"),\n      textOutput(\"accuracy_text\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  # Update home and away team choices based on location selection\n  observe({\n    req(input$location)\n    filtered_home_teams <- unique(data$hometeam[data$location == input$location])\n    updateSelectInput(session, \"hometeam\", choices = sort(filtered_home_teams))\n  })\n\n  observe({\n    req(input$hometeam)\n    filtered_away_teams <- unique(data$awayteam[data$hometeam == input$hometeam & data$location == input$location])\n    updateSelectInput(session, \"awayteam\", choices = sort(filtered_away_teams))\n  })\n\n  # Filter data based on inputs\n  filtered_data <- reactive({\n    req(input$location, input$hometeam, input$awayteam)\n    df <- data %>%\n      filter(location == input$location, hometeam == input$hometeam, awayteam == input$awayteam)\n\n    validate(\n      need(nrow(df) > 0, \"No data available for the selected teams and location.\")\n    )\n\n    df\n  })\n\n  # Calculate accuracy\n  calculate_accuracy <- function(df) {\n    if (nrow(df) == 0) return(list(accuracy = 0, total_matches = 0))\n\n    df <- df %>%\n      mutate(predicted_outcome = case_when(\n        binary_home_win == 1 ~ \"Home Win\",\n        binary_away_win == 1 ~ \"Away Win\",\n        binary_draw == 1 ~ \"Draw\",\n        TRUE ~ NA_character_\n      )) %>%\n      mutate(is_correct = ifelse(predicted_outcome == actual_outcome, 1, 0))\n\n    total_correct <- sum(df$is_correct, na.rm = TRUE)\n    total_matches <- nrow(df)\n    accuracy <- ifelse(total_matches > 0, total_correct / total_matches, 0)\n\n    list(accuracy = accuracy, total_matches = total_matches)\n  }\n\n  # Render bar chart\n  output$accuracy_chart <- renderPlotly({\n    req(input$location, input$hometeam, input$awayteam)\n\n    df <- filtered_data()\n    accuracy_result <- calculate_accuracy(df)\n\n    accuracy_data <- data.frame(\n      Outcome = c(\"Correct Predictions\", \"Incorrect Predictions\"),\n      Count = c(\n        accuracy_result$accuracy * accuracy_result$total_matches, \n        (1 - accuracy_result$accuracy) * accuracy_result$total_matches\n      )\n    )\n\n    # Fix for no matches available\n    if (sum(accuracy_data$Count) == 0) {\n      return(NULL)\n    }\n\n    p <- ggplot(accuracy_data, aes(x = Outcome, y = Count, fill = Outcome)) +\n      geom_bar(stat = \"identity\") +\n      labs(\n        title = paste(\"Prediction Accuracy for\", input$hometeam, \"vs\", input$awayteam, \"at\", input$location),\n        x = \"Outcome\", \n        y = \"Number of Matches\"\n      ) +\n      theme_minimal() +\n      scale_fill_brewer(palette = \"Set1\")\n\n    ggplotly(p)\n  })\n\n  # Render accuracy text\n  output$accuracy_text <- renderText({\n    req(input$location, input$hometeam, input$awayteam)\n\n    df <- filtered_data()\n    accuracy_result <- calculate_accuracy(df)\n\n    if (accuracy_result$total_matches == 0) {\n      return(\"No matches available for the selected teams and location.\")\n    }\n\n    paste0(\n      \"Accuracy: \", \n      sprintf(\"%.2f%%\", accuracy_result$accuracy * 100), \n      \" (\", accuracy_result$total_matches, \" matches)\"\n    )\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}